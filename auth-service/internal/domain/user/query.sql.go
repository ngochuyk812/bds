// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package user

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (guid, siteId, email, hash_password, salt, createdAt) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Guid         string
	Siteid       string
	Email        string
	HashPassword string
	Salt         string
	Createdat    int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Guid,
		arg.Siteid,
		arg.Email,
		arg.HashPassword,
		arg.Salt,
		arg.Createdat,
	)
	return err
}

const deleteUserByGuid = `-- name: DeleteUserByGuid :exec
UPDATE users SET deletedAt = ? WHERE guid = ?
`

type DeleteUserByGuidParams struct {
	Deletedat sql.NullInt64
	Guid      string
}

func (q *Queries) DeleteUserByGuid(ctx context.Context, arg DeleteUserByGuidParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserByGuid, arg.Deletedat, arg.Guid)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
UPDATE users SET deletedAt = ? WHERE id = ?
`

type DeleteUserByIdParams struct {
	Deletedat sql.NullInt64
	ID        int32
}

func (q *Queries) DeleteUserById(ctx context.Context, arg DeleteUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, arg.Deletedat, arg.ID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, guid, siteid, email, hash_password, salt, createdat, updatedat, deletedat FROM users WHERE deletedAt IS NULL AND siteId = ? AND email = ?
`

type GetUserByEmailParams struct {
	Siteid string
	Email  string
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, arg.Siteid, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Siteid,
		&i.Email,
		&i.HashPassword,
		&i.Salt,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const getUserByGuid = `-- name: GetUserByGuid :one
SELECT id, guid, siteid, email, hash_password, salt, createdat, updatedat, deletedat FROM users WHERE deletedAt IS NULL AND guid = ?
`

func (q *Queries) GetUserByGuid(ctx context.Context, guid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGuid, guid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Siteid,
		&i.Email,
		&i.HashPassword,
		&i.Salt,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, guid, siteid, email, hash_password, salt, createdat, updatedat, deletedat FROM users WHERE deletedAt IS NULL AND id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Siteid,
		&i.Email,
		&i.HashPassword,
		&i.Salt,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const getUsersPaging = `-- name: GetUsersPaging :many
SELECT id, guid, siteid, email, hash_password, salt, createdat, updatedat, deletedat FROM users WHERE deletedAt IS NULL AND siteId = ? ORDER BY createdAt DESC LIMIT ? OFFSET ?
`

type GetUsersPagingParams struct {
	Siteid string
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsersPaging(ctx context.Context, arg GetUsersPagingParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersPaging, arg.Siteid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Siteid,
			&i.Email,
			&i.HashPassword,
			&i.Salt,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserByGuid = `-- name: UpdateUserByGuid :exec
UPDATE users SET siteId = ?, email = ?, hash_password = ?, salt = ?, updatedAt = ? WHERE guid = ?
`

type UpdateUserByGuidParams struct {
	Siteid       string
	Email        string
	HashPassword string
	Salt         string
	Updatedat    sql.NullInt64
	Guid         string
}

func (q *Queries) UpdateUserByGuid(ctx context.Context, arg UpdateUserByGuidParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByGuid,
		arg.Siteid,
		arg.Email,
		arg.HashPassword,
		arg.Salt,
		arg.Updatedat,
		arg.Guid,
	)
	return err
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users SET siteId = ?, email = ?, hash_password = ?, salt = ?, updatedAt = ? WHERE id = ?
`

type UpdateUserByIdParams struct {
	Siteid       string
	Email        string
	HashPassword string
	Salt         string
	Updatedat    sql.NullInt64
	ID           int32
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.Siteid,
		arg.Email,
		arg.HashPassword,
		arg.Salt,
		arg.Updatedat,
		arg.ID,
	)
	return err
}
