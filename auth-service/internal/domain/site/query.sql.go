// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package site

import (
	"context"
	"database/sql"
)

const countSites = `-- name: CountSites :one
SELECT COUNT(*) AS total FROM sites WHERE deletedAt IS NULL
`

func (q *Queries) CountSites(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSites)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createSite = `-- name: CreateSite :exec
INSERT INTO sites (guid, siteId, name, createdAt) VALUES (?, ?, ?, ?)
`

type CreateSiteParams struct {
	Guid      string
	Siteid    string
	Name      string
	Createdat int64
}

func (q *Queries) CreateSite(ctx context.Context, arg CreateSiteParams) error {
	_, err := q.db.ExecContext(ctx, createSite,
		arg.Guid,
		arg.Siteid,
		arg.Name,
		arg.Createdat,
	)
	return err
}

const deleteSiteByGuid = `-- name: DeleteSiteByGuid :exec
UPDATE sites SET deletedAt = ? WHERE guid = ?
`

type DeleteSiteByGuidParams struct {
	Deletedat sql.NullInt64
	Guid      string
}

func (q *Queries) DeleteSiteByGuid(ctx context.Context, arg DeleteSiteByGuidParams) error {
	_, err := q.db.ExecContext(ctx, deleteSiteByGuid, arg.Deletedat, arg.Guid)
	return err
}

const deleteSiteById = `-- name: DeleteSiteById :exec
UPDATE sites SET deletedAt = ? WHERE id = ?
`

type DeleteSiteByIdParams struct {
	Deletedat sql.NullInt64
	ID        int32
}

func (q *Queries) DeleteSiteById(ctx context.Context, arg DeleteSiteByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteSiteById, arg.Deletedat, arg.ID)
	return err
}

const getSiteByGuid = `-- name: GetSiteByGuid :one
SELECT id, guid, siteid, name, createdat, updatedat, deletedat FROM sites WHERE guid = ?
`

func (q *Queries) GetSiteByGuid(ctx context.Context, guid string) (Site, error) {
	row := q.db.QueryRowContext(ctx, getSiteByGuid, guid)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Siteid,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const getSiteById = `-- name: GetSiteById :one
SELECT id, guid, siteid, name, createdat, updatedat, deletedat FROM sites WHERE id = ?
`

func (q *Queries) GetSiteById(ctx context.Context, id int32) (Site, error) {
	row := q.db.QueryRowContext(ctx, getSiteById, id)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.Siteid,
		&i.Name,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const getSitesPaging = `-- name: GetSitesPaging :many
SELECT id, guid, siteid, name, createdat, updatedat, deletedat FROM sites WHERE deletedAt IS NULL ORDER BY createdAt DESC LIMIT ? OFFSET ?
`

type GetSitesPagingParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetSitesPaging(ctx context.Context, arg GetSitesPagingParams) ([]Site, error) {
	rows, err := q.db.QueryContext(ctx, getSitesPaging, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Site
	for rows.Next() {
		var i Site
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Siteid,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSiteByGuid = `-- name: UpdateSiteByGuid :exec
UPDATE sites SET siteId = ?, name = ?, updatedAt = ? WHERE guid = ?
`

type UpdateSiteByGuidParams struct {
	Siteid    string
	Name      string
	Updatedat sql.NullInt64
	Guid      string
}

func (q *Queries) UpdateSiteByGuid(ctx context.Context, arg UpdateSiteByGuidParams) error {
	_, err := q.db.ExecContext(ctx, updateSiteByGuid,
		arg.Siteid,
		arg.Name,
		arg.Updatedat,
		arg.Guid,
	)
	return err
}

const updateSiteById = `-- name: UpdateSiteById :exec
UPDATE sites SET siteId = ?, name = ?, updatedAt = ? WHERE id = ?
`

type UpdateSiteByIdParams struct {
	Siteid    string
	Name      string
	Updatedat sql.NullInt64
	ID        int32
}

func (q *Queries) UpdateSiteById(ctx context.Context, arg UpdateSiteByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateSiteById,
		arg.Siteid,
		arg.Name,
		arg.Updatedat,
		arg.ID,
	)
	return err
}
